#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test de Integraci√≥n de Clustering en Recommendation Service
===========================================================

Prueba las integraciones de algoritmos de clustering en el sistema de recomendaciones.
"""

import logging
import json
from datetime import datetime
from recommendation_service import RecommendationService

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_clustering_integration():
    """Test principal de integraci√≥n de clustering"""
    print("üß™ TEST DE INTEGRACI√ìN DE CLUSTERING")
    print("=" * 50)
    
    # Crear servicio
    service = RecommendationService()
    
    try:
        # Conectar y cargar modelos
        print("\nüìä Conectando a BD y cargando modelos...")
        service.connect_database()
        service.connect_operational_database()
        service.load_ml_models()
        
        # Verificar qu√© modelos se cargaron
        print(f"\nü§ñ Modelos cargados: {list(service.models.keys())}")
        for model_name, model_info in service.models.items():
            silhouette = model_info.get('silhouette_score', 'N/A')
            n_clusters = model_info.get('n_clusters', 'N/A')
            print(f"   ‚Ä¢ {model_name}: {n_clusters} clusters, silhouette={silhouette}")
        
        # Test 1: Usuario con zona espec√≠fica (debe usar DBSCAN)
        print("\nüéØ TEST 1: Usuario con zona espec√≠fica (Palermo)")
        test_request_1 = {
            'fecha_visita': '2025-09-01',
            'hora_inicio': '10:00',
            'duracion_horas': 6,
            'latitud_origen': -34.5755,  # Palermo
            'longitud_origen': -58.4139,
            'zona_preferida': 'Palermo',
            'categorias_preferidas': ['Museos', 'Gastronom√≠a']
        }
        
        result_1 = service.generate_itinerary(1, test_request_1)
        
        if 'error' not in result_1:
            actividades = result_1.get('actividades', [])
            print(f"   ‚úÖ Itinerario generado: {len(actividades)} actividades")
            
            # Verificar si se us√≥ clustering geogr√°fico
            barrios_encontrados = set()
            for actividad in actividades:
                barrio = actividad.get('barrio')
                if barrio:
                    barrios_encontrados.add(barrio)
            
            print(f"   üìç Barrios en itinerario: {', '.join(barrios_encontrados)}")
            
            # Verificar si hay concentraci√≥n en Palermo (efecto DBSCAN)
            palermo_count = sum(1 for barrio in barrios_encontrados if 'palermo' in barrio.lower())
            if palermo_count > 0:
                print(f"   üéØ Clustering geogr√°fico FUNCIONANDO: {palermo_count} actividades en Palermo")
            else:
                print(f"   ‚ö†Ô∏è  Clustering geogr√°fico no detectado claramente")
                
        else:
            print(f"   ‚ùå Error en test 1: {result_1.get('error')}")
        
        # Test 2: Usuario foodie (debe usar K-means perfil)
        print("\nüçΩÔ∏è  TEST 2: Usuario foodie (perfil K-means)")
        test_request_2 = {
            'fecha_visita': '2025-09-01',
            'hora_inicio': '11:00',
            'duracion_horas': 8,
            'latitud_origen': -34.6118,  # Puerto Madero
            'longitud_origen': -58.3636,
            'categorias_preferidas': ['Gastronom√≠a'],  # Solo gastronom√≠a
            'user_id': 1
        }
        
        result_2 = service.generate_itinerary(1, test_request_2)
        
        if 'error' not in result_2:
            actividades = result_2.get('actividades', [])
            gastro_count = sum(1 for act in actividades if act.get('categoria') == 'Gastronom√≠a')
            
            print(f"   ‚úÖ Itinerario generado: {len(actividades)} actividades")
            print(f"   üçΩÔ∏è  Actividades gastron√≥micas: {gastro_count}/{len(actividades)}")
            
            if gastro_count >= len(actividades) * 0.6:  # 60%+ gastronom√≠a
                print(f"   üéØ Perfil de usuario K-means FUNCIONANDO: {gastro_count/len(actividades)*100:.1f}% gastronom√≠a")
            else:
                print(f"   ‚ö†Ô∏è  Perfil de usuario no aplicado claramente")
                
        else:
            print(f"   ‚ùå Error en test 2: {result_2.get('error')}")
        
        # Test 3: Verificar clustering jer√°rquico de categor√≠as
        print("\nüèõÔ∏è  TEST 3: Clustering jer√°rquico de categor√≠as")
        test_request_3 = {
            'fecha_visita': '2025-09-01',
            'hora_inicio': '09:00',
            'duracion_horas': 6,
            'latitud_origen': -34.6037,  # San Telmo
            'longitud_origen': -58.3816,
            'categorias_preferidas': ['Museos'],  # Solo museos
            'user_id': 2
        }
        
        result_3 = service.generate_itinerary(2, test_request_3)
        
        if 'error' not in result_3:
            actividades = result_3.get('actividades', [])
            print(f"   ‚úÖ Itinerario generado: {len(actividades)} actividades")
            
            # Verificar diversidad de categor√≠as culturales (efecto clustering jer√°rquico)
            categorias_encontradas = set()
            for actividad in actividades:
                cat = actividad.get('categoria')
                if cat:
                    categorias_encontradas.add(cat)
            
            print(f"   üèõÔ∏è  Categor√≠as encontradas: {', '.join(categorias_encontradas)}")
            
            cultural_categories = {'Museos', 'Monumentos', 'Lugares Hist√≥ricos'}
            cultural_found = cultural_categories.intersection(categorias_encontradas)
            
            if len(cultural_found) > 1:
                print(f"   üéØ Clustering jer√°rquico FUNCIONANDO: {len(cultural_found)} categor√≠as culturales relacionadas")
            else:
                print(f"   ‚ö†Ô∏è  Clustering jer√°rquico no detectado")
                
        else:
            print(f"   ‚ùå Error en test 3: {result_3.get('error')}")
        
        # Resumen de integraci√≥n
        print("\n" + "=" * 50)
        print("üìä RESUMEN DE INTEGRACI√ìN:")
        
        algoritmos_integrados = []
        algoritmos_disponibles = []
        
        if 'dbscan' in service.models:
            algoritmos_disponibles.append('DBSCAN (clustering geogr√°fico)')
            algoritmos_integrados.append('‚úÖ DBSCAN en filtrado y optimizaci√≥n')
        
        if 'geographic' in service.models:
            algoritmos_disponibles.append('K-means (clustering geogr√°fico)')
            # K-means geogr√°fico ya no se usa directamente
        
        if 'hierarchical' in service.models:
            algoritmos_disponibles.append('Jer√°rquico (relaciones de categor√≠as)')
            algoritmos_integrados.append('‚úÖ Jer√°rquico en bonus de categor√≠as')
        
        print(f"   ‚Ä¢ Algoritmos disponibles: {len(algoritmos_disponibles)}")
        for algo in algoritmos_disponibles:
            print(f"     - {algo}")
        
        print(f"   ‚Ä¢ Integraciones activas: {len(algoritmos_integrados)}")
        for integ in algoritmos_integrados:
            print(f"     - {integ}")
        
        if algoritmos_integrados:
            print(f"\nüéâ INTEGRACI√ìN EXITOSA: {len(algoritmos_integrados)} algoritmos funcionando")
        else:
            print(f"\n‚ö†Ô∏è  SIN INTEGRACIONES: Verificar resultados de clustering")
            
    except Exception as e:
        print(f"\n‚ùå ERROR EN TEST: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        service.disconnect_database()

def test_clustering_methods_individually():
    """Test individual de m√©todos de clustering"""
    print("\nüî¨ TEST DE M√âTODOS INDIVIDUALES")
    print("=" * 40)
    
    service = RecommendationService()
    
    try:
        service.connect_database()
        service.load_ml_models()
        
        # Test m√©todo de cluster geogr√°fico
        print("\n1. Test _find_geographic_cluster_for_zone:")
        cluster_palermo = service._find_geographic_cluster_for_zone('Palermo')
        print(f"   Cluster para Palermo: {cluster_palermo}")
        
        cluster_recoleta = service._find_geographic_cluster_for_zone('Recoleta')
        print(f"   Cluster para Recoleta: {cluster_recoleta}")
        
        # Test m√©todo de perfil de usuario
        print("\n2. Test _get_user_cluster_profile:")
        profile_1 = service._get_user_cluster_profile(1)
        print(f"   Perfil usuario 1: {profile_1}")
        
        profile_2 = service._get_user_cluster_profile(2)
        print(f"   Perfil usuario 2: {profile_2}")
        
        # Test m√©todos de bonus
        print("\n3. Test m√©todos de bonus:")
        user_prefs = {'categorias_preferidas': ['Gastronom√≠a', 'Museos']}
        
        bonus_gastro = service._calculate_category_cluster_bonus('Gastronom√≠a', user_prefs)
        print(f"   Bonus jer√°rquico Gastronom√≠a: {bonus_gastro}")
        
        poi_test = {'categoria': 'Gastronom√≠a', 'tipo_cocina': 'Italiana', 'tiene_web': True}
        bonus_profile = service._calculate_user_profile_bonus(poi_test, 0)  # Perfil foodie
        print(f"   Bonus perfil foodie: {bonus_profile}")
        
    except Exception as e:
        print(f"   ‚ùå Error en m√©todos individuales: {e}")
        
    finally:
        service.disconnect_database()

def test_performance_comparison():
    """Test de comparaci√≥n de performance con y sin clustering"""
    print("\n‚ö° TEST DE PERFORMANCE: Con vs Sin Clustering")
    print("=" * 50)
    
    service = RecommendationService()
    
    try:
        service.connect_database()
        service.connect_operational_database()
        
        # Test con clustering
        print("\nüöÄ Con clustering integrado:")
        service.load_ml_models()
        
        import time
        start_time = time.time()
        
        result_with_clustering = service.generate_itinerary(1, {
            'fecha_visita': '2025-09-01',
            'hora_inicio': '10:00',
            'duracion_horas': 6,
            'latitud_origen': -34.5755,
            'longitud_origen': -58.4139,
            'categorias_preferidas': ['Museos', 'Gastronom√≠a']
        })
        
        time_with_clustering = time.time() - start_time
        
        if 'error' not in result_with_clustering:
            actividades_clustering = len(result_with_clustering.get('actividades', []))
            print(f"   ‚úÖ Tiempo: {time_with_clustering:.3f}s, Actividades: {actividades_clustering}")
        else:
            print(f"   ‚ùå Error: {result_with_clustering.get('error')}")
        
        # Test sin clustering (simulado)
        print("\nüêå Sin clustering (fallback):")
        service.models = {}  # Vaciar modelos para simular sin clustering
        
        start_time = time.time()
        
        result_without_clustering = service.generate_itinerary(1, {
            'fecha_visita': '2025-09-01',
            'hora_inicio': '10:00',
            'duracion_horas': 6,
            'latitud_origen': -34.5755,
            'longitud_origen': -58.4139,
            'categorias_preferidas': ['Museos', 'Gastronom√≠a']
        })
        
        time_without_clustering = time.time() - start_time
        
        if 'error' not in result_without_clustering:
            actividades_sin_clustering = len(result_without_clustering.get('actividades', []))
            print(f"   ‚úÖ Tiempo: {time_without_clustering:.3f}s, Actividades: {actividades_sin_clustering}")
        else:
            print(f"   ‚ùå Error: {result_without_clustering.get('error')}")
        
        # Comparaci√≥n
        if 'error' not in result_with_clustering and 'error' not in result_without_clustering:
            print(f"\nüìä COMPARACI√ìN:")
            print(f"   ‚Ä¢ Diferencia de tiempo: {abs(time_with_clustering - time_without_clustering):.3f}s")
            print(f"   ‚Ä¢ Diferencia de actividades: {abs(actividades_clustering - actividades_sin_clustering)}")
            
            if time_with_clustering < time_without_clustering:
                print("   üéØ Clustering MEJORA la performance")
            else:
                print("   ‚ö†Ô∏è  Clustering tiene overhead, pero mejora calidad")
        
    except Exception as e:
        print(f"   ‚ùå Error en test de performance: {e}")
        
    finally:
        service.disconnect_database()

if __name__ == '__main__':
    test_clustering_integration()
    test_clustering_methods_individually()
    test_performance_comparison()
